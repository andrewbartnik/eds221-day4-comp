---
title: "comp session A"
format: html
editor: visual
---

```{r}
library(tidyverse)

```

```{r}
quarter_splits <- c(1.0, 1.1, 1.2, 1.1, 1.4, 1.5, 1.6, 1.4)

for(i in seq_along(quarter_splits)) {
  print(quarter_splits[i] + quarter_splits[i + 1])
}
```

# Intro to functions

### make a function to double the user input

```{r}
double_this <- function(my_value) {
  print(my_value * 2)
}

double_this(5)

# this function is also vectorized!!!
double_this(c(1, 2, 10, 175))

```

```{r}
#Write a function that asks for a users function name and age, and returns an exclamation like "My name is __ and I am __ years old

name_age <- function(name, age) {
  print(paste("My name is", name, "and I am", age, "years old"))
}

```

### conditional function

```{r}
calc_age <- function(animal, human_age) {
  if(animal == "dog") {
    print(human_age * 7)
  } else if(animal == "goat") {
    print(human_age * 4.7)
  }
  else print(paste0("This function is not built to calculate ages of ", animal))
}
```

## data frames

```{r}
dog_choice <- tribble(
  ~dog_name, ~food, 
  "Khora", "everything",
  "Teddy", "salmon",
  "Waffle", "pancakes",
  "Banjo", "chicken"
)

dog_menu <- function(name) {
  my_subset <- filter(dog_choice, dog_name == name)
  print(paste("My name is", my_subset$dog_name, "and my favorite food is", my_subset$food))
}


```

## Functions meet for loops

```{r}
means_over_columns <- function(df) {
  for(i in seq_along(df)) {
    col_mean <- mean(df[[i]], na.rm = TRUE) # calculate mean
    column_name <- colnames(df[i]) #pull out col names
    print(paste("The mean value of", column_name, "is", col_mean))
  }
}

means_over_columns(df = mtcars)
```

## Logistic growth

```{r}

#shortcut - cmd/opt/x

logistic_growth <- function(K, N0, r, time) {
  K / (1 + ((K - N0) / N0) * exp(-r * time))
}

#test
logistic_growth(K = 5000, N0 = 100, r = 0.01, t = 42)

# add a time vector

time_vec <- seq(from = 0, to = 35, by = 0.1)

pop_35 <- logistic_growth(N0 = 40, K = 8000, r = 0.5, time = time_vec)

pop_time_35_df <- data.frame(time_vec, pop_35)

ggplot(pop_time_35_df, aes(x = time_vec, y = pop_35, color = time_vec, size = pop_35)) + geom_line()
```

```{r}
pop_35_vec <- vector(mode = "numeric", length = length(time_vec))

for(i in seq_along(time_vec)) {
  population <- logistic_growth(N0 = 100, K = 6000, r = 0.27, time = time_vec[i])
  pop_35_vec[i] <- population
}

pop_35_vec

# now iterate to extend over multiple growth rates

r_seq <- seq(from = 0.2, to = 0.4, by = 0.01)

```

```{r}
out_matrix <- matrix(nrow = length(time_vec), ncol = length(r_seq))
```

```{r}
for(i in seq_along(r_seq)) {
  for(j in seq_along(time_vec)) {
    pop <- logistic_growth(N0 = 100, K = 6000, r = r_seq[i], time = time_vec[j])
    out_matrix[j, i] <- pop
  }
}
```

##### now wrangle it

```{r}
pop_df <- data.frame(out_matrix, time = time_vec)

colnames(pop_df) <- c(paste0("gr_", r_seq), "time")

logistic_df_long<- pop_df |> 
  pivot_longer(cols = -time, values_to = "population", names_to = "growth_rate")

ggplot(logistic_df_long, aes(x = time, y = population, color = growth_rate)) +geom_line(size = 0.3) 
```

Use `warning` to add a warning

Use `stop` to add an error

P = 0.3/rho A v\^3 - in watts

#rho = air density (kg/m\^3)

#a = area covered by turbine (m\^2)

#v = wind velocity (m/s)

```{r}
calc_wind_power <- function(rho, radius, windspeed) {
  0.3 * rho * pi * (radius ^ 2) * (windspeed ^ 3)
  if (windspeed > 130){
    warning("woah, thats really fast. are you sure??")
  }
  if (rho > 1.225) {
    warning("that air density is suspicious")
  }
  if (radius < 0) {
    stop("rotor radius MUST be a positive value (in metres)")
  }
}
  

calc_wind_power(1.225, 50, 35)
```
